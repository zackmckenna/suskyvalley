{"version":3,"sources":["logo.svg","components/Parallax.js","App.js","serviceWorker.js","index.js","assets/sdv_divider.png","fonts/StardewValley.ttf","assets/stardewbackground.png"],"names":["module","exports","MyComponent","useState","name","setName","blur","bgImage","require","bgImageAlt","strength","Row","Col","className","style","WebkitTextFillColor","fontColor","fontSize","marginBottom","fontFamily","margin","sm","InputGroup","FormControl","onChange","event","preventDefault","target","value","handleNameChange","placeholder","aria-label","aria-describedby","Append","Button","variant","src","divider","App","Parallax","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,uMCqE5BC,EAhEK,WAAO,IAAD,EACAC,mBAAS,IADT,mBACjBC,EADiB,KACXC,EADW,KAQxB,OACE,6BAEI,kBAAC,WAAD,CACIC,KAAM,EACNC,QAASC,EAAQ,GACjBC,WAAW,UACXC,SAAU,KAEV,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACE,wBAAIC,UAAU,OAAOC,MAAO,CAAEC,oBAAqB,qBAAsBC,UAAW,QAASC,SAAU,QAASC,aAAc,IAAKC,WAAY,kBAC3I,0BAAML,MAAO,CAAEK,WAAY,sBAA3B,KADJ,MACgE,0BAAML,MAAO,CAAEK,WAAY,sBAA3B,QAIpE,kBAACR,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,wBAAIE,MAAO,CAAEC,oBAAqB,qBAAsBK,OAAQ,IAAKH,SAAU,QAASE,WAAY,kBAClG,0BAAML,MAAO,CAAEK,WAAY,sBAA3B,KADF,OAC+D,0BAAML,MAAO,CAAEK,WAAY,sBAA3B,QAInE,kBAACR,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,wBAAIE,MAAO,CAAEK,WAAY,sBAAzB,+BAGJ,kBAACR,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,wBAAIE,MAAO,CAAEK,WAAY,sBAAzB,6BAGJ,kBAACR,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKE,MAAO,CAAEM,OAAQ,QAASC,GAAI,GACjC,kBAACC,EAAA,EAAD,CAAYT,UAAU,QACpB,kBAACU,EAAA,EAAD,CACET,MAAO,CAAEK,WAAY,qBACrBK,SAAU,SAACC,GAAD,OA3CL,SAACA,GACxBA,EAAMC,iBACNrB,EAAQoB,EAAME,OAAOC,OAyCkBC,CAAiBJ,IACtCG,MAAOxB,EACP0B,YAAY,OACZC,aAAW,uBACXC,mBAAiB,iBAEnB,kBAACV,EAAA,EAAWW,OAAZ,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,cAKV,yBAAKC,IAAKC,SCvBPC,MA9Bf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC0B,EAAD,Q,MCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5B3D,EAAOC,QAAU,IAA0B,yC,kBCA3CD,EAAOC,QAAU,IAA0B,2C,kBCA3CD,EAAOC,QAAU,IAA0B,gD","file":"static/js/main.478fc3d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport { Parallax, Background } from 'react-parallax';\nimport { Row, Col, InputGroup, Button, FormControl } from 'react-bootstrap'\nimport divider from '../assets/sdv_divider.png'\n\nconst MyComponent = () => {\n  const [name, setName] = useState('')\n\n  const handleNameChange = (event) => {\n    event.preventDefault()\n    setName(event.target.value)\n  }\n\n  return (\n    <div>\n        {/* -----basic config-----*/}\n        <Parallax\n            blur={0}\n            bgImage={require('../assets/stardewbackground.png')}\n            bgImageAlt=\"the cat\"\n            strength={200}\n        >\n            <Row>\n                <Col>\n                  <h1 className='mt-5' style={{ WebkitTextFillColor: 'rgba(217, 190, 37)', fontColor: 'black', fontSize: '10rem', marginBottom: '0', fontFamily: 'StardewValley'}}>\n                      <span style={{ fontFamily: 'StardewValleyCaps'}}>S</span>USK<span style={{ fontFamily: 'StardewValleyCaps'}}>Y</span>\n                  </h1>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <h1 style={{ WebkitTextFillColor: 'rgba(217, 190, 37)', margin: '0', fontSize: '10rem', fontFamily: 'StardewValley'}}>\n                    <span style={{ fontFamily: 'StardewValleyCaps'}}>V</span>ALLE<span style={{ fontFamily: 'StardewValleyCaps'}}>Y</span>\n                  </h1>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <h1 style={{ fontFamily: 'StardewValleyText'}}> Welcome to Susky Valley!</h1>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <h3 style={{ fontFamily: 'StardewValleyText'}}>Please enter your name:</h3>\n                </Col>\n              </Row>\n              <Row>\n                <Col style={{ margin: 'auto'}} sm={6}>\n                  <InputGroup className=\"mb-3\">\n                    <FormControl\n                      style={{ fontFamily: 'StardewValleyText'}}\n                      onChange={(event) => handleNameChange(event)}\n                      value={name}\n                      placeholder=\"name\"\n                      aria-label=\"Recipient's username\"\n                      aria-describedby=\"basic-addon2\"\n                    />\n                    <InputGroup.Append>\n                      <Button variant=\"primary\">Button</Button>\n                    </InputGroup.Append>\n                  </InputGroup>\n                </Col>\n              </Row>\n            <img src={divider} />\n        </Parallax>\n    </div>\n  )\n}\n;\nexport default MyComponent;\n","import React, {useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Container, Row, Col, Button, Jumbotron } from 'react-bootstrap'\nimport StardewValley from './fonts/StardewValley.ttf'\nimport stardewbackground from './assets/stardewbackground.png'\nimport divider from './assets/sdv_divider.png'\n// import { Parallax, Background } from 'react-parallax'\nimport Parallax from './components/Parallax'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Parallax />\n      {/* <Row>\n        <Col>\n          <h1 className='mt-5' style={{ WebkitTextFillColor: 'rgba(217, 190, 37)', fontColor: 'black', fontSize: '10rem', marginBottom: '0', fontFamily: 'StardewValley'}}>\n              <span style={{ fontFamily: 'StardewValleyCaps'}}>S</span>USK<span style={{ fontFamily: 'StardewValleyCaps'}}>Y</span>\n          </h1>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <h1 style={{ WebkitTextFillColor: 'rgba(217, 190, 37)', margin: '0', fontSize: '10rem', fontFamily: 'StardewValley'}}>\n            <span style={{ fontFamily: 'StardewValleyCaps'}}>V</span>ALLE<span style={{ fontFamily: 'StardewValleyCaps'}}>Y</span>\n          </h1>\n        </Col>\n      </Row>\n      <img src={divider}/>\n      <Row>\n        <Col style={{ fontFamily: 'StardewValleyText'}}>\n\n        </Col>\n      </Row>\n      <header className=\"App-header\">\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './fonts/StardewValley.ttf'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sdv_divider.e4b9ac23.png\";","module.exports = __webpack_public_path__ + \"static/media/StardewValley.d52e9a73.ttf\";","module.exports = __webpack_public_path__ + \"static/media/stardewbackground.317d7843.png\";"],"sourceRoot":""}